version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - cims_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME}
    environment:
      # Database configuration
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # MCP configuration
      MCP_HOST: ${MCP_HOST}
      MCP_PORT: ${MCP_PORT}
      # Application configuration
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      # CORS origins
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "${BACKEND_EXTERNAL_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cims_network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Frontend Service (Development)
  frontend:
    image: node:20-alpine
    container_name: ${FRONTEND_CONTAINER_NAME}
    working_dir: /app
    environment:
      # API configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:3000"
    depends_on:
      - backend
    networks:
      - cims_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    restart: unless-stopped

networks:
  cims_network:
    driver: bridge

volumes:
  postgres_data_dev:
    driver: local
